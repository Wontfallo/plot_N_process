# -*- coding: utf-8 -*-
"""
Asteroid Data Processor and Analyser With Option To Plot

Written by: Gerald Jackson 7/22/2024

Usage:
    As Module:
        This module implements methods for reading, writing, visualizing, and summarizing
        the reports generated by Experian.

        read_asteroid_json:
            Arguments:
                json_path (str, list[str]) - Path(s) to the .json files.
                verbose (optional bool, defaults False) - optional argument for
                    debug logging to the console.
            Returns:
                df (DataFrame) - Pandas DataFrame object with columns defined
                    by the exported data. The 'TimeStamp' column has dtype
                    datetime.

        write_asteroid_csv:
            Arguments:
                df (DataFrame) - Pandas DataFrame object, like the one returned by
                    read_asteroid_json.
                csv_path (str) - Path to write the data frame to a csv at.
                verbose (optional bool, defaults False) - optional argument for
                    debug logging to the console.
            Returns:
                bool - Indicates success of the writing operation.

        plot_asteroid_data:
            Arguments:
                df (DataFrame) - Pandas DataFrame object, like the one returned by
                    read_asteroid_json.
                columns (list) - List of column names to plot.
                save_path (optional str) - Path to save the plot. If None, the plot
                    is displayed instead.
            Returns:
                None

        display_data_summary:
            Arguments:
                df (DataFrame) - Pandas DataFrame object to summarize.
                num_rows (int) - Number of rows to display in the sample.
            Returns:
                None

    As Standalone Script:
        The default runtime operation of this script is as a command line script
        that takes a number of files as inputs, outputs a single .csv file,
        displays a summary of the data, and optionally generates a plot of the data.
"""

import pandas as pd
import json
import dateparser
from tqdm import tqdm
from pandarallel import pandarallel
import matplotlib.pyplot as plt
import argparse
from tabulate import tabulate
import textwrap

tqdm.pandas()
pandarallel.initialize(progress_bar=True, verbose=True)

JSON_PATH = 'RptData 10.json'
CSV_PATH = 'AST_1_Run_9_Attempt_1.csv'

DATETIME_FORMATS = [
    '%Y,%m,%d,%H,%M,%S',
    '%m/%d/$Y %H:%M%S'
]


def read_asteroid_json(json_path=JSON_PATH, verbose=True):
    if isinstance(json_path, list):
        if verbose:
            print('Working on files:')
        dfs = []
        for path in json_path:
            if verbose:
                print(f'{path}')
            dfs.append(read_asteroid_json(path))
        if verbose:
            print("Processed all files. Concatenating files.")
        dfs.sort(key=lambda df: df['TimeStamp'].iloc[0])
        if verbose:
            print("Sorted files by start time.")
        df = pd.concat(dfs).drop_duplicates().reset_index(drop=True)
    elif isinstance(json_path, str):
        if verbose:
            print(f'Working on file {json_path}')
        with open(json_path, 'r') as f:
            data = f.read()
            if data[:17] == 'var objRptData = ':
                data = data[17:]
            if data[-1] == ',':
                data = data[:-1]

        data = json.loads(data)['objectProperties_0']['dataSet']
        column_names = [column['pointName'] for column in data]
        if verbose:
            print(f'Found columns: {column_names}')

        df = pd.DataFrame({
            'TimeStamp': pd.to_datetime(data[0]['timeStamp'], format='%Y,%m,%d,%H,%M,%S'),
            **{column['pointName']: column['value'] for column in data}
        })

        df.sort_values('TimeStamp', ignore_index=True, inplace=True)
        if verbose:
            print('Sorted timestamps')

    if verbose:
        print(f'DF Final Shape = {df.shape}')
    return df


def write_asteroid_csv(df, csv_path=CSV_PATH, verbose=True):
    df.to_csv(csv_path, index=False, lineterminator='\n')
    if verbose:
        print('Writing DF to CSV')
        print(f'Beginning time = {df["TimeStamp"].iloc[0]}\nEnd time = {df["TimeStamp"].iloc[-1]}')
    return True

def plot_asteroid_data(df, columns, save_path=None, summary_text=''):
    plt.figure(figsize=(15, 10))

    # Plot the data
    for column in columns:
        plt.plot(df['TimeStamp'], df[column], label=column)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Asteroid Temperature Data Over Time')
    plt.legend()
    plt.grid(True)

    # Add summary text to the plot
    plt.figtext(0.1, -0.1, summary_text, fontsize=8, va="top", ha="left")

    if save_path:
        plt.savefig(save_path, bbox_inches='tight', pad_inches=0.5)
        print(f"Plot saved to {save_path}")
    else:
        plt.tight_layout()
        plt.show()


def display_data_summary(df, num_rows=1, prefix='TEMP', output_file=None):
    temp_columns = [col for col in df.columns if col.startswith(prefix)]
    temp_df = df[['TimeStamp'] + temp_columns]

    summary = []
    summary.append(f"Data Summary (columns starting with '{prefix}'):")
    summary.append(f"Total number of rows: {len(df)}")
    summary.append(f"Date range: {df['TimeStamp'].min()} to {df['TimeStamp'].max()}")
    summary.append("\nColumns:")
    for col in temp_columns:
        summary.append(f"- {col}")

    summary.append(f"\nFirst {num_rows} rows of data:")
    summary.append(tabulate(temp_df.head(num_rows), headers='keys', tablefmt='pretty'))

    summary_text = '\n'.join(summary)

    # Print to console
    print(summary_text)

    # Write to file if specified
    if output_file:
        with open(output_file, 'w') as f:
            f.write(summary_text)
        print(f"Summary saved to {output_file}")

    return summary_text


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='*', help='JSON files to process')
    parser.add_argument('--plot', nargs='*', help='Columns to plot')
    parser.add_argument('--plot-file', help='File to save the plot to')
    parser.add_argument('--no-summary', action='store_true', help='Skip displaying data summary')
    parser.add_argument('--summary-file', help='File to save the summary output')
    args = parser.parse_args()

    if not args.files:
        print("You must provide at least one JSON file to convert.")
        exit(1)

    df = read_asteroid_json(args.files, verbose=True)
    csv_path = args.files[0][:-5] + '.csv'
    write_asteroid_csv(df, csv_path, verbose=True)

    summary_text = ''
    if not args.no_summary:
        summary_text = display_data_summary(df, output_file=args.summary_file)

    if args.plot:
        plot_columns = [col for col in args.plot if col.startswith('TEMP')]
        plot_asteroid_data(df, plot_columns, args.plot_file, summary_text)
    elif not args.no_summary:
        print(
            "\nTo create a plot, run the script again with the --plot argument followed by the column names you want to plot.")
        print("Example: python script_name.py your_file.json --plot TEMP_STILL TEMP_STG1_PLT")
